syntax = "proto3";

package lastlock.api;

option go_package = "lastlock.com/proto/credentialpb;credentialpb";

// Specifies mechanism use for credentialing.
enum CredentialType
{
  // PKOC BLE message.
  PKOC_BLE = 0x00;

  // Last Lock Apple Wallet type 1 
  APPLE_WALLET_TYPE_1 = 0x01;

  // Last Lock Apple Wallet type 2 
  APPLE_WALLET_TYPE_2 = 0x02;

  // MIFARE Classic
  MIFARE_CLASSIC = 0x03;

  // MIFARE DESFire EV3
  MIFARE_DESFIRE_V3 = 0x04;

  // EM4100
  EM_4100 = 0x05;

  // HID Prox Corp 1000
  HID_PROX_CORP_1000 = 0x06;

  // HID Prox Corp 10301
  HID_PROX_10301 = 0x07;

  // Last Lock Google Wallet type 1
  GOOGLE_WALLET_TYPE_1 = 0x08;
}

// A Day specifies a day of the week.
enum Day
{
  Sunday = 0;
  Monday = 1;
  Tuesday = 2;
  Wednesday = 3;
  Thursday = 4;
  Friday = 5;
  Saturday = 6;
}

// Quarter hour intervals.
enum QuarterHour
{
  // 0 minutes past the hour.
  Minute00 = 0;
  // 15 minutes past the hour.
  Minute15 = 1;
  // 30 minutes past the hour.
  Minute30 = 2;
  // 45 minutes past the hour.
  Minute45 = 3;
}

// A range gives access if the local time is after or at start_hour (and start_quarter hour)
// and before the end_hour (and end_quarter_hour) on any of the repeated days.
//
// If end_hour and end_quarter_hour are not set, access is permitted until midnight.
//
// Last Lock devices have a five minute grace period on both ends.
message Range
{
  // Hours since midnight.
  optional uint32 start_hour = 1;
  // Minutes past the start_hour.
  optional QuarterHour start_quarter_hour = 2;
  // Hours since midnight.
  optional uint32 end_hour = 3;
  // Minutes pas the end_hour.
  optional QuarterHour end_quarter_hour = 4;
  // On which days the schedule is invoked.
  repeated Day days = 5;
}

// A range schedule gives access if any of the repeated ranges give access
message RangeSchedule
{
  // A list of ranges setting allowed access.
  repeated Range ranges = 1;
}

// Credential is what is physically presented for authentication to a device.
message Credential
{
  // The type of credential physically presented for authentication.
  optional CredentialType credential_type = 1;

  // The unique data encoded within a credential.
  // No two credentials may have the same data.
  optional bytes data = 2;

  oneof schedule
  {
    bytes bitmap_schedule = 3;
    RangeSchedule range_schedule = 4;
  }

  // When does this credential become valid (UTC epoch)
  optional uint32 start_time = 5;

  // When does this credential cease to be valid (UTC epoch)
  optional uint32 end_time = 6;
}
